{"version":3,"sources":["MapChart.js","App.js","index.js"],"names":["markers","MapChart","props","state","setTooltipContent","that","this","Papa","parse","download","complete","results","skipRow","minSize","maxSize","data","size","i","length","marker","markerOffset","name","coordinates","push","console","log","Math","sqrt","setState","projection","height","window","innerWidth","width","innerHeight","style","zoom","maxZoom","geography","geographies","map","geo","key","rsmKey","onMouseEnter","num","properties","NAME","POP_EST","round","onMouseLeave","default","fill","outline","hover","pressed","r","textAnchor","y","fontSize","fontFamily","React","Component","memo","App","useState","content","setContent","Navbar","bg","fixed","className","expand","Brand","icon","faUserMd","Toggle","aria-controls","Collapse","id","class","Nav","Link","href","faDatabase","faCode","Container","fluid","Row","noGutters","Col","marginTop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a692c0a.chunk.js","sourcesContent":["import React, { memo} from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  ZoomableGroup,\n  Marker\n} from \"react-simple-maps\";\n\nimport Papa from \"papaparse\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-10m.json\";\n\nconst markers = [];\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nclass MapChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      setTooltipContent: props.setTooltipContent\n    }\n  }\n\n  componentDidMount() {\n    let that = this;\n    Papa.parse(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv\", {\n      download: true,\n      complete: function(results) {\n        that.markers = [];\n        let skipRow = true;\n        let minSize = 100000000000000000000;\n        let maxSize = 0;\n        for(let data of results.data) {\n          if(skipRow) {\n            skipRow = false;\n            continue;\n          }\n          let size = \"\";\n          let i = data.length - 1;\n          while(size===\"\" && i > 0) {\n            size = data[i];\n            i = i - 1;\n          }\n          if(size===\"\") {\n            size = 0;\n          }\n          if(size < minSize) {\n            minSize = size;\n          }\n          if(size > maxSize) {\n            maxSize = size;\n          }\n          let marker = {\n            markerOffset: 0,\n            name: data[0],\n            coordinates: [data[3], data[2]],\n            size: size\n          };\n          markers.push(marker)\n        }\n\n        for(let i = 0; i < markers.length; i++) {\n          console.log(markers[i].size + \", \" + minSize + \", \" + maxSize);\n          markers[i].size = Math.sqrt((markers[i].size - minSize) / (maxSize - minSize));\n          console.log(markers[i].size);\n        }\n        that.setState({});\n      }\n    });\n  }\n\n  render() {\n    return (\n      <>\n      <ComposableMap\n          projection={\"geoMercator\"}\n          height={window.innerWidth}\n          width={window.innerHeight - 50}\n          style={{width: \"100%\", height: \"100%\"}}\n      >\n        <ZoomableGroup zoom={1} maxZoom={1000}>\n          <Geographies geography={geoUrl}>\n            {\n              ({geographies}) =>\n                geographies.map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={() => {\n                      const {NAME, POP_EST} = geo.properties;\n                      if(NAME === \"Antarctica\") {\n                        return;\n                      }\n                      this.state.setTooltipContent(`${NAME} â€” ${rounded(POP_EST)}`);\n                    }}\n                    onMouseLeave={() => {\n                      this.state.setTooltipContent(\"\");\n                    }}\n                    style={{\n                      default: {\n                        fill: \"#ddd\",\n                        outline: \"none\"\n                      },\n                      hover: {\n                        fill: \"#999\",\n                        outline: \"none\"\n                      },\n                      pressed: {\n                        fill: \"#ddd\",\n                        outline: \"none\"\n                      }\n                    }}\n                  />\n                ))\n            }\n          </Geographies>\n          {\n            markers.map(({ name, coordinates, markerOffset, size }) => (\n              <Marker coordinates={coordinates}>\n                <circle r={size * 3} fill=\"#F008\"  />\n                <text\n                  textAnchor=\"middle\"\n                  y={markerOffset}\n                  style={{ fontSize: \"2px\", fontFamily: \"system-ui\", fill: \"#5D5A6D\" }}\n                >\n                  {/*name*/}\n                </text>\n              </Marker>\n            ))\n          }\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n    );\n  }\n}\n\nexport default memo(MapChart);\n","import React, {useState} from 'react';\nimport MapChart from \"./MapChart\";\nimport ReactTooltip from \"react-tooltip\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserMd, faDatabase, faCode } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n    [\n      <Navbar bg=\"light\" fixed=\"top\" className={\"p-0 pl-2\"}  expand=\"lg\">\n        <Navbar.Brand>\n            <FontAwesomeIcon icon={faUserMd} />\n            <span className=\"small\"> COVID19 </span>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className={\"border-0 \"} />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <span class=\"small text-danger\">How accurate is John Hopkins' COVID19 map?</span>\n          <Nav className=\"mr-auto\">\n            <Nav.Link className=\"small\" href={\"https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series\"}>\n              <FontAwesomeIcon icon={faDatabase} /> Data source\n            </Nav.Link>\n            <Nav.Link className=\"small\" href={\"https://github.com/daniel-karl/covid19-map\"}>\n              <FontAwesomeIcon icon={faCode} /> Source code\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>,\n      <Container fluid className={\"w-100 h-100 p-0\"}>\n        <Row noGutters={\"true\"} className={\"h-100\"}>\n          <Col className={\"h-100\"}>\n            <MapChart setTooltipContent={setContent} style={{marginTop: \"50px\"}}/>\n            <ReactTooltip>{content}</ReactTooltip>\n          </Col>\n        </Row>\n      </Container>\n    ]\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}